% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_combos.R
\name{query_combos}
\alias{query_combos}
\title{Get overlap between query and predicted drug combination signatures.}
\usage{
query_combos(query_genes, method = "average", include = NULL)
}
\arguments{
\item{query_genes}{Named numeric vector of differentual expression values for
query genes. Usually 'meta' slot of \code{get_dprimes} result.}

\item{method}{One of 'average' (default) or 'ml' (machine learning -
see details and vignette).}

\item{include}{Character vector of cmap drug names for which combinations with all
other cmap drugs will be predicted and queried. If \code{NULL} (default),
all 856086 two drug combinations will be predicted and queried.}
}
\value{
Vector of numeric values between 1 and -1 indicating extent of overlap
  between query and drug combination signatures (see details).
}
\description{
Drug combinations with the largest positive and negative net overlap are predicted to,
respectively, mimic and reverse the query signature. A value of 1 would indicate
that all drug combination and query genes are regulated in the same direction
and with the same rankings within their signatures. A value of -1 would indicate
that all drug and query genes are regulated in the opposite direction and with
the same rankings within their signatures.
}
\details{
To predict and query all 856086 two-drug combinations, the 'average'
\code{method} can take as little as 10 minutes (Intel Core i7-6700). The 'ml'
(machine learning) \code{method} takes two hours on the same hardware and
requires ~10GB of RAM but is slightly more accurate. Both methods will run
faster by specifying only a subset of drugs using the \code{include} parameter.
To speed up the 'ml' method, the MRO+MKL distribution of R can help
substantially (\href{https://mran.revolutionanalytics.com/open/}{link}).
}
\examples{
library(lydata)
library(crossmeta)

# location of data
data_dir <- system.file("extdata", package = "lydata")

# gather GSE names
gse_names  <- c("GSE9601", "GSE15069", "GSE50841", "GSE34817", "GSE29689")

# load previous analysis
anals <- load_diff(gse_names, data_dir)

# perform meta-analysis
es <- es_meta(anals)

# get dprimes
dprimes <- get_dprimes(es)

# query combinations of metformin and all other cmap drugs
top_met_combos <- query_combos(dprimes$meta, include = 'metformin')

# previous query but with machine learning method
# top_met_combos <- query_combos(dprimes$meta, 'ml', 'metformin')

# query all cmap drug combinations
# top_combos <- query_combos(dprimes$meta)

# query all cmap drug combinations with machine learning method
# top_combos <- query_combos(dprimes$meta, 'ml')
}

